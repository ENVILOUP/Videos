x-services-healthcheck: &services-healthcheck
  test: ["CMD-SHELL", "curl --silent --fail http://localhost:8080/health-check || exit 1"]
  interval: 10s
  retries: 5
  start_period: 30s
  timeout: 10s

name: enviloup_videos

services:
  nginx:
    image: nginx
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Content/nginx/conf.d/cdn.enviloup.conf:/etc/nginx/conf.d/cdn.enviloup.conf:ro
      - ./Content/nginx/conf.d/content-app.conf:/etc/nginx/conf.d/content-app.conf:ro
      - ./Content/fixtures/media:/var/www/media:ro
      - ./Recommendations/nginx/conf.d/recommendations-app.conf:/etc/nginx/conf.d/recommendations-app.conf:ro
      - ./Search/nginx/conf.d/search-app.conf:/etc/nginx/conf.d/search-app.conf:ro
      - ./Authorization/nginx/conf.d/authorization-app.conf:/etc/nginx/conf.d/authorization-app.conf:ro
    depends_on:
      content-app:
        condition: service_healthy
      recommendations-app:
        condition: service_healthy
      search-app:
        condition: service_healthy
      authorization-app:
        condition: service_healthy

  pg:
    image: postgres:15.8-bullseye
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgres/data/pgdata
    volumes:
      - enviloup_pg:/var/lib/postgres/data/pgdata
      - ./deploy/postgresql/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql:ro

  redis:
    image: redis:7.0.11-bullseye

  authorization-app:
    image: enviloup/authorization:latest
    build: 
      context: ./Authorization
      dockerfile: Dockerfile.production
    environment:
      - DATABASE__CONNECTIONSTRING=Host=pg;Port=5432;Database=authdb;Username=postgres;Password=postgres
      - JWT_KEY=18Z0Vmuq5j99VY0X1xkIVlZ499t3SqHha7siBG29tnb4WAuR
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - pg

  content-app:
    image: enviloup/content:latest
    build:
      context: ./Content
      dockerfile: Dockerfile
    command: "--log-level info"
    environment:
      DATABASE: postgres://postgres:postgres@pg:5432/contentdb
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - pg

  recommendations-app:
    image: enviloup/recommendations:latest
    build:
      context: ./Recommendations
      dockerfile: Dockerfile
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - redis

  search-app:
    image: enviloup/search:latest
    build: 
      context: ./Search
      dockerfile: Dockerfile
    command: "--log-level debug"
    healthcheck:
      <<: *services-healthcheck

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  broker:
    image: confluentinc/cp-server:7.5.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'

  kafka-ui:
    image: provectuslabs/kafka-ui:v0.7.2
    container_name: kafka-ui
    depends_on:
      - broker
    ports:
      - "8082:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT

networks:
  default:
    name: enviloup_void_sex_network
    attachable: true

volumes:
  enviloup_pg:
    name: enviloup_pg
  esdata:
    name: enviloup_esdata