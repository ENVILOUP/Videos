x-services-healthcheck: &services-healthcheck
  test: ["CMD-SHELL", "curl --silent --fail http://localhost:8080/health-check || exit 1"]
  interval: 10s
  retries: 5
  start_period: 30s
  timeout: 10s

name: enviloup_videos

services:
  nginx:
    image: nginx
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./Content/nginx/conf.d/cdn.enviloup.conf:/etc/nginx/conf.d/cdn.enviloup.conf:ro
      - ./Content/nginx/conf.d/content-app.conf:/etc/nginx/conf.d/content-app.conf:ro
      - ./Content/fixtures/media:/var/www/media:ro
      - ./Recommendations/nginx/conf.d/recommendations-app.conf:/etc/nginx/conf.d/recommendations-app.conf:ro
      - ./Search/nginx/conf.d/search-app.conf:/etc/nginx/conf.d/search-app.conf:ro
      - ./Authorization/nginx/conf.d/authorization-app.conf:/etc/nginx/conf.d/authorization-app.conf:ro
    depends_on:
      content-app:
        condition: service_healthy
      recommendations-app:
        condition: service_healthy
      search-app:
        condition: service_healthy
      authorization-app:
        condition: service_healthy

  pg:
    image: postgres:15.8-bullseye
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      PGDATA: /var/lib/postgres/data/pgdata
    command: postgres -c config_file=/etc/postgresql/common.conf
    volumes:
      - ./deploy/postgresql/conf/common.conf:/etc/postgresql/common.conf:ro
      - enviloup_pg:/var/lib/postgres/data/pgdata
      - ./deploy/postgresql/init-database.sql:/docker-entrypoint-initdb.d/init-database.sql:ro

  redis:
    image: redis:7.0.11-bullseye

  authorization-app:
    image: enviloup/authorization:latest
    restart: always
    build: 
      context: ./Authorization
      dockerfile: Dockerfile.production
    environment:
      - DATABASE__CONNECTIONSTRING=Host=pg;Port=5432;Database=authdb;Username=postgres;Password=postgres
      - JWT_KEY=18Z0Vmuq5j99VY0X1xkIVlZ499t3SqHha7siBG29tnb4WAuR
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - pg

  content-app:
    image: enviloup/content:latest
    restart: always
    build:
      context: ./Content
      dockerfile: Dockerfile
    command: "--log-level info"
    environment:
      DATABASE: postgres://postgres:postgres@pg:5432/contentdb
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - pg

  recommendations-app:
    image: enviloup/recommendations:latest
    restart: always
    build:
      context: ./Recommendations
      dockerfile: Dockerfile
    healthcheck:
      <<: *services-healthcheck
    depends_on:
      - redis

  search-app:
    image: enviloup/search:latest
    restart: always
    build: 
      context: ./Search
      dockerfile: Dockerfile
    command: "--log-level debug"
    healthcheck:
      <<: *services-healthcheck

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    restart: always
    ports:
      - "127.0.0.1:2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.8.0
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "127.0.0.1:9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT_INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  schema-registry:
    image: confluentinc/cp-schema-registry:7.8.0
    restart: always
    depends_on:
      - kafka
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "kafka:29092"
      SCHEMA_REGISTRY_HOST_NAME: "schema-registry"
      SCHEMA_REGISTRY_LISTENERS: "http://0.0.0.0:8081"

  debezium:
    image: debezium/connect:1.9.7.Final
    restart: always
    depends_on:
      - schema-registry
    environment:
      BOOTSTRAP_SERVERS: "kafka:29092"
      GROUP_ID: "debezium"
      CONFIG_STORAGE_TOPIC: "debezium_configs"
      OFFSET_STORAGE_TOPIC: "debezium_offsets"
      STATUS_STORAGE_TOPIC: "debezium_statuses"
      CONFIG_STORAGE_REPLICATION_FACTOR: 1
      OFFSET_STORAGE_REPLICATION_FACTOR: 1
      STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_KEY_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_VALUE_CONVERTER: "io.confluent.connect.avro.AvroConverter"
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONNECT_INTERNAL_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_INTERNAL_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_REST_ADVERTISED_HOST_NAME: "debezium"
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: "debezium"
      CONNECT_CONFIG_STORAGE_TOPIC: "debezium_configs"
      CONNECT_OFFSET_STORAGE_TOPIC: "debezium_offsets"
      CONNECT_STATUS_STORAGE_TOPIC: "debezium_statuses"
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
    ports:
      - "8083:8083"

networks:
  default:
    name: enviloup_void_sex_network
    attachable: true

volumes:
  enviloup_pg:
    name: enviloup_pg
